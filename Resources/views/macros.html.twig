{% macro renderTransitionButton(workflow, transition, workflowItem, transitionData) %}
    {% import 'OroUIBundle::macros.html.twig' as ui %}

    {% if transition.displayType == 'dialog' and (transitionData['dialog-url'] is not defined or not transitionData['dialog-url']) and transition.hasForm() %}
        {% set transitionData = transitionData|merge({
            'dialog-url': path(
                'oro_workflow_widget_transition_form',
                {
                    workflowItemId: workflowItem.id,
                    transitionName: transition.name
                }
            )
        }) %}
    {% endif %}

    {% if transitionData['transition-url'] is not defined or not transitionData['transition-url'] %}
        {% set transitionData = transitionData|merge({'transition-url':
            path(
                'oro_api_workflow_transit',
                {
                    workflowItemId: workflowItem.id,
                    transitionName: transition.name
                }
            )
        }) %}
    {% endif %}

    {% if transitionData['transition-condition-messages'] %}
        {% set conditionMessages = [] %}
        {% for error in transitionData['transition-condition-messages'] %}
            {% set conditionMessages = conditionMessages|merge(['<li>' ~ error.message|trans(error.parameters) ~ '</li>']) %}
        {% endfor %}
        {% if conditionMessages|length %}
            {% set transitionData = transitionData|merge({
                'transition-condition-messages': '<ol>' ~ conditionMessages|join ~ '</ol>'
            }) %}
        {% else %}
            {% set transitionData = transitionData|merge({
                'transition-condition-messages': ''
            }) %}
        {% endif %}
    {% endif %}

    {% set data = transitionData|merge({
        'page-component-module': 'oroworkflow/js/app/components/button-component',
        'page-component-options': {'displayType': transition.displayType}|json_encode,
    }) %}

    {% if transition.frontendOptions is defined and transition.frontendOptions.dialog is defined %}
        {% set data = data|merge({
            'data-dialog-options': transition.frontendOptions.dialog|json_encode|raw
        }) %}
    {% endif %}

    {% set class %}
        'btn icons-holder-text'
        {% if transition.displayType == 'dialog' %}no-hash{% endif %}
        {% if not transitionData.enabled %}disabled{% endif %}
        {% if transition.frontendOptions is defined and transition.frontendOptions.class is defined %}{{ transition.frontendOptions.class }}{% endif %}"
    {% endset %}

    {# Transaltions temporary disabled due to BAP-5355 #}
    {{ ui.link({
        'path': transitionData['transition-url'],
        'id': 'transition-%s-%s'|format(workflow.name, transition.name),
        'iCss': transition.frontendOptions is defined and transition.frontendOptions.icon is defined ? transition.frontendOptions.icon : '',
        'title': transition.label|trans({},'workflows'),
        'class': 'btn icons-holder-text',
        'data': data,
        'label':  transition.label|trans({},'workflows')
    }) }}
{% endmacro %}

{% macro renderResetButton(data, blockId) %}
    {% set resetButtonId = 'workflow-item-' ~ data.workflow_item_id ~ '-reset' %}
    <a href="javascript:void(0);"
       data-url="{{ data.url }}"
       title="{{ data.title }}"
       class="btn icons-holder-text btn-primary"
       id="{{ resetButtonId }}">
            <i class="icon-repeat"></i>
            {{ data.title }}
    </a>

    <script type="text/javascript">
        require(['jquery', 'oroworkflow/js/reset-handler'],
            function($, workflowResetHandler) {
                'use strict';

                $(function() {
                    var resetBtn = $('#{{ blockId }}').find('#{{ resetButtonId }}');
                    resetBtn.data('executor', function() {
                        workflowResetHandler.call(resetBtn);
                    });
                    resetBtn.on('click', function(e) {
                        e.preventDefault();
                        $(this).data('executor').call();
                    });
                });
            });
    </script>
{% endmacro %}

{% macro renderGoToTranslationsIconByLink(link, large) %}
    <span class="workflow-translatable-field">
        <a target="_blank" href="{{ link|raw }}" title="{{ 'oro.workflow.action.workflow.go_to_translations'|trans}}">
            <i class="fa fa-language{% if large %} large-icon{% endif %}"></i>
        </a>
    </span>
{% endmacro %}
