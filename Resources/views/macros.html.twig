{% macro renderTransitionButton(workflow, transition, enabled, url, redirectToWorkflow) %}
    <button type="button"
        {% if not enabled %}disabled="disabled"{% endif %}
        data-href="{{ url }}"
        data-redirect-to-workflow="{{ redirectToWorkflow }}"
        class="btn icons-holder-text no-hash {% if transition.options.frontend is defined and transition.options.frontend.class is defined %}{{ transition.options.frontend.class }}{% endif %}"
        id="transition-{{ workflow.name }}-{{ transition.name }}">
        {% if transition.options.frontend is defined and transition.options.frontend.icon is defined %}
            <i class="{{ transition.options.frontend.icon }} hide-text">{{ transition.label|trans }}</i>
        {% endif %}
        {{ transition.label|trans }}
    </button>
{% endmacro %}

{% macro renderTransitionsJs(transitionsData, blockId) %}
    <script type="text/javascript">
        $(function() {
            var container = $('#{{ blockId }}');
            {% for data in transitionsData %}
                container.on('click', '#transition-{{ data.workflow.name }}-{{ data.transition.name }}', function(e) {
                    var element = $(this);
                    e.preventDefault();
                    $.getJSON($(this).data('href'))
                        .done(function(response) {
                            var doRedirect = function(redirectUrl) {
                                if (Oro.hashNavigationEnabled()) {
                                    Oro.hashNavigationInstance.setLocation(redirectUrl);
                                } else {
                                    window.location.href = redirectUrl;
                                }
                            };
                            var doReload = function() {
                                if (Oro.hashNavigationEnabled()) {
                                    Oro.hashNavigationInstance.loadPage();
                                } else {
                                    window.location.reload();
                                }
                            };

                            /** Handle redirectUrl result parameter for RedirectPostAction */
                            element.one('transitions_success', function(e, response) {
                                if (response.workflowItem
                                        && response.workflowItem.result
                                        && response.workflowItem.result.redirectUrl
                                ) {
                                    e.stopImmediatePropagation();
                                    doRedirect(response.workflowItem.result.redirectUrl);
                                }
                            });
                            /** Handle redirect-to-workflow element data parameter */
                            element.one('transitions_success', function(e, response) {
                                var workflowItemId = null;
                                if (response.workflowItem && response.workflowItem.id) {
                                    workflowItemId = response.workflowItem.id;
                                }
                                var needRedirect = element.data('redirect-to-workflow');
                                if (needRedirect && workflowItemId) {
                                    e.stopImmediatePropagation();
                                    var redirectUrl = Routing.generate(
                                        'oro_workflow_step_edit',
                                        {id: workflowItemId}
                                    );
                                    doRedirect(redirectUrl);
                                }
                            });
                            /** By default reload page */
                            element.one('transitions_success', doReload);
                            element.trigger('transitions_success', [response]);
                        })
                        .fail(function(jqxhr, textStatus, error) {
                            element.one('transitions_failure', function() {
                                Oro.NotificationFlashMessage('error', _.__('Could not perform transition'));
                            });
                            element.trigger('transitions_failure', [jqxhr, textStatus, error]);
                        });
                    return false;
                });
            {% endfor %}
        });
    </script>
{% endmacro %}
