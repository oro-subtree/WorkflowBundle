{% extends 'OroUIBundle:actions:update.html.twig' %}
{% form_theme form with ['OroFormBundle:Form:fields.html.twig'] %}

{% oro_title_set({params : {"%workflow_definition.label%": entity.label} }) %}
{% set title = entity.name
    ? entity.name ~ ' - ' ~ 'Update'|trans ~ ' ' ~ 'oro.workflow.workflowdefinition.entity_label'|trans
    : 'New'|trans ~ ' ' ~ 'oro.workflow.workflowdefinition.entity_label'|trans
%}
{% set formAction = entity.name ? path('oro_workflow_definition_update', { 'name': entity.name }) : path('oro_workflow_definition_create')  %}

{% block head_script %}
    {{ parent() }}

    {% block stylesheets %}
        {{ form_stylesheet(form) }}
    {% endblock %}
{% endblock %}

{% block navButtons %}
    {% if entity.name and resource_granted('DELETE', entity) %}
        {{ UI.deleteButton({
            'dataUrl': path('oro_api_workflow_definitiondelete', {'workflowDefinition': entity.name}),
            'dataRedirect': path('oro_workflow_definition_index'),
            'aCss': 'no-hash remove-button',
            'id': 'btn-remove-workflow',
            'dataId': entity.name,
            'entity_label': 'oro.workflow.workflowdefinition.entity_label'|trans
        }) }}
        {{ UI.buttonSeparator() }}
    {% endif %}
    {{ UI.cancelButton(path('oro_workflow_definition_index')) }}

    <div class="btn-group">
        <button type="button" class="btn btn-success" id="save-btn">{{ 'Save'|trans }}</button>
    </div>
{% endblock %}

{% block pageHeader %}
    {% if entity.name %}
        {% set breadcrumbs = {
        'entity':      entity,
        'indexPath':   path('oro_workflow_definition_index'),
        'indexLabel': 'oro.workflow.workflowdefinition.entity_plural_label'|trans,
        'entityTitle': entity.label
        } %}
        {{ parent() }}
    {% else %}
        {% include 'OroUIBundle::page_title_block.html.twig' %}
    {% endif %}
{% endblock pageHeader %}

{% block stats %}
    <li>{{ 'oro.workflow.workflow_definition.createdAt'|trans }}: {{ entity.createdAt ? entity.createdAt|oro_format_datetime : 'N/A' }}</li>
    <li>{{ 'oro.workflow.workflow_definition.updatedAt'|trans }}: {{ entity.updatedAt ? entity.updatedAt|oro_format_datetime : 'N/A' }}</li>
{% endblock stats %}

{% block content_data %}
    {% set dataBlocks = [{
        'title': 'General'|trans,
        'class': 'active',
        'subblocks': [
            {
            'data': [
                    form_row(form.label),
                    form_row(form.related_entity),
                    form_row(form.steps_display_ordered)
                ]
            }
        ]
    }] %}

    {% set stepsListWidget %}
        <div class="workflow-definition-steps-list-container"></div>
        <script type="text/javascript">
            require([
                'oro/workflow-management',
                'oro/workflow-management/workflow/model',
                'oro/workflow-management/step/collection',
                'oro/workflow-management/transition/collection'
            ],
            function(
                WorkflowManagement,
                WorkflowModel,
                StepCollection,
                TransitionCollection
            ) {
                // Debug
                var StepModel = require('oro/workflow-management/step/model');
                var step2 = new StepModel({
                    'name': 'step_2',
                    'label': 'Test step 2',
                    'order': 2,
                    'isFinal': false
                });
                var step1 = new StepModel({
                    'name': 'step_1',
                    'label': 'Test step 1',
                    'order': 1,
                    'allowedTransitions': ['test_regular_transition']
                });
                var steps = new StepCollection([step2, step1]);

                var TransitionModel = require('oro/workflow-management/transition/model');
                var startTransition = new TransitionModel({
                    'name': 'test_start_transition',
                    'label': 'Start transition',
                    'stepTo': 'step_1',
                    'isStart': true
                });
                var regularTransition = new TransitionModel({
                    'name': 'test_regular_transition',
                    'label': 'Regular transition',
                    'stepTo': 'step_2',
                    'isStart': false
                });
                var transitions = new TransitionCollection([startTransition, regularTransition]);
                //Debug end

                var workflowModel = new WorkflowModel({
                    steps: steps,
                    transitions: transitions
                });
                var workflowManagement = new WorkflowManagement({
                    el: '#{{ form.vars.id }}',
                    stepsEl: '.workflow-definition-steps-list-container',
                    model: workflowModel
                });

                workflowManagement.render();
            });
        </script>
    {% endset %}

    {% set dataBlocks = dataBlocks|merge([{
        'title' : 'Designer'|trans,
            'subblocks': [
                {
                    'title': 'Workflow steps and transitions'|trans,
                    'data': [stepsListWidget]
                }
        ]
    }] ) %}

    {% set id = 'workflow-designer' %}
    {% set data = {
        'dataBlocks': dataBlocks,
    } %}
    {{ parent() }}
{% endblock content_data %}
